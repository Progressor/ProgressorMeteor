//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
thrift = Npm.require('thrift');
Thrift = thrift.Thrift;
Q = thrift.Q;

ttypes = {};
TestCase = ttypes.TestCase = function (args) {
	this.functionName = null;
	this.inputTypes = null;
	this.inputValues = null;
	this.outputTypes = null;
	this.expectedOutputValues = null;
	if (args) {
		if (args.functionName !== undefined && args.functionName !== null) {
			this.functionName = args.functionName;
		}
		if (args.inputTypes !== undefined && args.inputTypes !== null) {
			this.inputTypes = Thrift.copyList(args.inputTypes, [ null ]);
		}
		if (args.inputValues !== undefined && args.inputValues !== null) {
			this.inputValues = Thrift.copyList(args.inputValues, [ null ]);
		}
		if (args.outputTypes !== undefined && args.outputTypes !== null) {
			this.outputTypes = Thrift.copyList(args.outputTypes, [ null ]);
		}
		if (args.expectedOutputValues !== undefined && args.expectedOutputValues !== null) {
			this.expectedOutputValues = Thrift.copyList(args.expectedOutputValues, [ null ]);
		}
	}
};
TestCase.prototype = {};
TestCase.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.STRING) {
					this.functionName = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 2:
				if (ftype == Thrift.Type.LIST) {
					var _size0 = 0;
					var _rtmp34;
					this.inputTypes = [];
					var _etype3 = 0;
					_rtmp34 = input.readListBegin();
					_etype3 = _rtmp34.etype;
					_size0 = _rtmp34.size;
					for (var _i5 = 0; _i5 < _size0; ++_i5) {
						var elem6 = null;
						elem6 = input.readString();
						this.inputTypes.push(elem6);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 3:
				if (ftype == Thrift.Type.LIST) {
					var _size7 = 0;
					var _rtmp311;
					this.inputValues = [];
					var _etype10 = 0;
					_rtmp311 = input.readListBegin();
					_etype10 = _rtmp311.etype;
					_size7 = _rtmp311.size;
					for (var _i12 = 0; _i12 < _size7; ++_i12) {
						var elem13 = null;
						elem13 = input.readString();
						this.inputValues.push(elem13);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 4:
				if (ftype == Thrift.Type.LIST) {
					var _size14 = 0;
					var _rtmp318;
					this.outputTypes = [];
					var _etype17 = 0;
					_rtmp318 = input.readListBegin();
					_etype17 = _rtmp318.etype;
					_size14 = _rtmp318.size;
					for (var _i19 = 0; _i19 < _size14; ++_i19) {
						var elem20 = null;
						elem20 = input.readString();
						this.outputTypes.push(elem20);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 5:
				if (ftype == Thrift.Type.LIST) {
					var _size21 = 0;
					var _rtmp325;
					this.expectedOutputValues = [];
					var _etype24 = 0;
					_rtmp325 = input.readListBegin();
					_etype24 = _rtmp325.etype;
					_size21 = _rtmp325.size;
					for (var _i26 = 0; _i26 < _size21; ++_i26) {
						var elem27 = null;
						elem27 = input.readString();
						this.expectedOutputValues.push(elem27);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

TestCase.prototype.write = function (output) {
	output.writeStructBegin('TestCase');
	if (this.functionName !== null && this.functionName !== undefined) {
		output.writeFieldBegin('functionName', Thrift.Type.STRING, 1);
		output.writeString(this.functionName);
		output.writeFieldEnd();
	}
	if (this.inputTypes !== null && this.inputTypes !== undefined) {
		output.writeFieldBegin('inputTypes', Thrift.Type.LIST, 2);
		output.writeListBegin(Thrift.Type.STRING, this.inputTypes.length);
		for (var iter28 in this.inputTypes) {
			if (this.inputTypes.hasOwnProperty(iter28)) {
				iter28 = this.inputTypes[ iter28 ];
				output.writeString(iter28);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	if (this.inputValues !== null && this.inputValues !== undefined) {
		output.writeFieldBegin('inputValues', Thrift.Type.LIST, 3);
		output.writeListBegin(Thrift.Type.STRING, this.inputValues.length);
		for (var iter29 in this.inputValues) {
			if (this.inputValues.hasOwnProperty(iter29)) {
				iter29 = this.inputValues[ iter29 ];
				output.writeString(iter29);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	if (this.outputTypes !== null && this.outputTypes !== undefined) {
		output.writeFieldBegin('outputTypes', Thrift.Type.LIST, 4);
		output.writeListBegin(Thrift.Type.STRING, this.outputTypes.length);
		for (var iter30 in this.outputTypes) {
			if (this.outputTypes.hasOwnProperty(iter30)) {
				iter30 = this.outputTypes[ iter30 ];
				output.writeString(iter30);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	if (this.expectedOutputValues !== null && this.expectedOutputValues !== undefined) {
		output.writeFieldBegin('expectedOutputValues', Thrift.Type.LIST, 5);
		output.writeListBegin(Thrift.Type.STRING, this.expectedOutputValues.length);
		for (var iter31 in this.expectedOutputValues) {
			if (this.expectedOutputValues.hasOwnProperty(iter31)) {
				iter31 = this.expectedOutputValues[ iter31 ];
				output.writeString(iter31);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

Result = ttypes.Result = function (args) {
	this.success = null;
	this.result = null;
	this.performance = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = args.success;
		}
		if (args.result !== undefined && args.result !== null) {
			this.result = args.result;
		}
		if (args.performance !== undefined && args.performance !== null) {
			this.performance = new ttypes.PerformanceIndicators(args.performance);
		}
	}
};
Result.prototype = {};
Result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.BOOL) {
					this.success = input.readBool();
				} else {
					input.skip(ftype);
				}
				break;
			case 2:
				if (ftype == Thrift.Type.STRING) {
					this.result = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 3:
				if (ftype == Thrift.Type.STRUCT) {
					this.performance = new ttypes.PerformanceIndicators();
					this.performance.read(input);
				} else {
					input.skip(ftype);
				}
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

Result.prototype.write = function (output) {
	output.writeStructBegin('Result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
		output.writeBool(this.success);
		output.writeFieldEnd();
	}
	if (this.result !== null && this.result !== undefined) {
		output.writeFieldBegin('result', Thrift.Type.STRING, 2);
		output.writeString(this.result);
		output.writeFieldEnd();
	}
	if (this.performance !== null && this.performance !== undefined) {
		output.writeFieldBegin('performance', Thrift.Type.STRUCT, 3);
		this.performance.write(output);
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

PerformanceIndicators = ttypes.PerformanceIndicators = function (args) {
	this.runtimeMilliSeconds = null;
	if (args) {
		if (args.runtimeMilliSeconds !== undefined && args.runtimeMilliSeconds !== null) {
			this.runtimeMilliSeconds = args.runtimeMilliSeconds;
		}
	}
};
PerformanceIndicators.prototype = {};
PerformanceIndicators.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.I64) {
					this.runtimeMilliSeconds = input.readI64();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

PerformanceIndicators.prototype.write = function (output) {
	output.writeStructBegin('PerformanceIndicators');
	if (this.runtimeMilliSeconds !== null && this.runtimeMilliSeconds !== undefined) {
		output.writeFieldBegin('runtimeMilliSeconds', Thrift.Type.I64, 1);
		output.writeI64(this.runtimeMilliSeconds);
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ttypes.TypeContainerArray = 'array';
ttypes.TypeContainerList = 'list';
ttypes.TypeContainerSet = 'set';
ttypes.TypeContainerMap = 'map';
ttypes.TypeString = 'string';
ttypes.TypeCharacter = 'char';
ttypes.TypeBoolean = 'bool';
ttypes.TypeByte = 'byte';
ttypes.TypeShort = 'short';
ttypes.TypeInteger = 'int';
ttypes.TypeLong = 'long';
ttypes.TypeSingle = 'single';
ttypes.TypeDouble = 'double';
ttypes.TypeDecimal = 'decimal';
