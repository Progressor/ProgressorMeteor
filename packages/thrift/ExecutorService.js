//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

Executor = {};
//HELPER FUNCTIONS AND STRUCTURES

ExecutorService_execute_args = function (args) {
	this.language = null;
	this.fragment = null;
	this.testCases = null;
	if (args) {
		if (args.language !== undefined && args.language !== null) {
			this.language = args.language;
		}
		if (args.fragment !== undefined && args.fragment !== null) {
			this.fragment = args.fragment;
		}
		if (args.testCases !== undefined && args.testCases !== null) {
			this.testCases = Thrift.copyList(args.testCases, [ ttypes.TestCase ]);
		}
	}
};
ExecutorService_execute_args.prototype = {};
ExecutorService_execute_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.STRING) {
					this.language = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 2:
				if (ftype == Thrift.Type.STRING) {
					this.fragment = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 3:
				if (ftype == Thrift.Type.LIST) {
					var _size32 = 0;
					var _rtmp336;
					this.testCases = [];
					var _etype35 = 0;
					_rtmp336 = input.readListBegin();
					_etype35 = _rtmp336.etype;
					_size32 = _rtmp336.size;
					for (var _i37 = 0; _i37 < _size32; ++_i37) {
						var elem38 = null;
						elem38 = new ttypes.TestCase();
						elem38.read(input);
						this.testCases.push(elem38);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_execute_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_execute_args');
	if (this.language !== null && this.language !== undefined) {
		output.writeFieldBegin('language', Thrift.Type.STRING, 1);
		output.writeString(this.language);
		output.writeFieldEnd();
	}
	if (this.fragment !== null && this.fragment !== undefined) {
		output.writeFieldBegin('fragment', Thrift.Type.STRING, 2);
		output.writeString(this.fragment);
		output.writeFieldEnd();
	}
	if (this.testCases !== null && this.testCases !== undefined) {
		output.writeFieldBegin('testCases', Thrift.Type.LIST, 3);
		output.writeListBegin(Thrift.Type.STRUCT, this.testCases.length);
		for (var iter39 in this.testCases) {
			if (this.testCases.hasOwnProperty(iter39)) {
				iter39 = this.testCases[ iter39 ];
				iter39.write(output);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_execute_result = function (args) {
	this.success = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = Thrift.copyList(args.success, [ ttypes.Result ]);
		}
	}
};
ExecutorService_execute_result.prototype = {};
ExecutorService_execute_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 0:
				if (ftype == Thrift.Type.LIST) {
					var _size40 = 0;
					var _rtmp344;
					this.success = [];
					var _etype43 = 0;
					_rtmp344 = input.readListBegin();
					_etype43 = _rtmp344.etype;
					_size40 = _rtmp344.size;
					for (var _i45 = 0; _i45 < _size40; ++_i45) {
						var elem46 = null;
						elem46 = new ttypes.Result();
						elem46.read(input);
						this.success.push(elem46);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_execute_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_execute_result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.LIST, 0);
		output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
		for (var iter47 in this.success) {
			if (this.success.hasOwnProperty(iter47)) {
				iter47 = this.success[ iter47 ];
				iter47.write(output);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorServiceClient = Executor.Client = function (output, pClass) {
	this.output = output;
	this.pClass = pClass;
	this._seqid = 0;
	this._reqs = {};
};
ExecutorServiceClient.prototype = {};
ExecutorServiceClient.prototype.seqid = function () {
	return this._seqid;
}
ExecutorServiceClient.prototype.new_seqid = function () {
	return this._seqid += 1;
}
ExecutorServiceClient.prototype.execute = function (language, fragment, testCases, callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[ this.seqid() ] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_execute(language, fragment, testCases);
		return _defer.promise;
	} else {
		this._reqs[ this.seqid() ] = callback;
		this.send_execute(language, fragment, testCases);
	}
};

ExecutorServiceClient.prototype.send_execute = function (language, fragment, testCases) {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_execute_args();
	args.language = language;
	args.fragment = fragment;
	args.testCases = testCases;
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_execute = function (input, mtype, rseqid) {
	var callback = this._reqs[ rseqid ] || function () {
		};
	delete this._reqs[ rseqid ];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_execute_result();
	result.read(input);
	input.readMessageEnd();

	if (null !== result.success) {
		return callback(null, result.success);
	}
	return callback('execute failed: unknown result');
};
ExecutorServiceProcessor = Executor.Processor = function (handler) {
	this._handler = handler
}
ExecutorServiceProcessor.prototype.process = function (input, output) {
	var r = input.readMessageBegin();
	if (this[ 'process_' + r.fname ]) {
		return this[ 'process_' + r.fname ].call(this, r.rseqid, input, output);
	} else {
		input.skip(Thrift.Type.STRUCT);
		input.readMessageEnd();
		var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
		output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
		x.write(output);
		output.writeMessageEnd();
		output.flush();
	}
}

ExecutorServiceProcessor.prototype.process_execute = function (seqid, input, output) {
	var args = new ExecutorService_execute_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.execute.length === 3) {
		Q.fcall(this._handler.execute, args.language, args.fragment, args.testCases)
			.then(function (result) {
				var result = new ExecutorService_execute_result({ success: result });
				output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("execute", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.execute(args.language, args.fragment, args.testCases, function (err, result) {
			if (err == null) {
				var result = new ExecutorService_execute_result((err != null ? err : { success: result }));
				output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("execute", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

