//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
Executor = {}
//HELPER FUNCTIONS AND STRUCTURES

ExecutorService_ping_args = function (args) {
};
ExecutorService_ping_args.prototype = {};
ExecutorService_ping_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		input.skip(ftype);
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_ping_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_ping_args');
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_ping_result = function (args) {
};
ExecutorService_ping_result.prototype = {};
ExecutorService_ping_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		input.skip(ftype);
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_ping_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_ping_result');
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getSupportedLanguages_args = function (args) {
};
ExecutorService_getSupportedLanguages_args.prototype = {};
ExecutorService_getSupportedLanguages_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		input.skip(ftype);
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getSupportedLanguages_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getSupportedLanguages_args');
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getSupportedLanguages_result = function (args) {
	this.success = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = Thrift.copyList(args.success, [null]);
		}
	}
};
ExecutorService_getSupportedLanguages_result.prototype = {};
ExecutorService_getSupportedLanguages_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 0:
				if (ftype == Thrift.Type.SET) {
					var _size48 = 0;
					var _rtmp352;
					this.success = [];
					var _etype51 = 0;
					_rtmp352 = input.readSetBegin();
					_etype51 = _rtmp352.etype;
					_size48 = _rtmp352.size;
					for (var _i53 = 0; _i53 < _size48; ++_i53) {
						var elem54 = null;
						elem54 = input.readString();
						this.success.push(elem54);
					}
					input.readSetEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getSupportedLanguages_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getSupportedLanguages_result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.SET, 0);
		output.writeSetBegin(Thrift.Type.STRING, this.success.length);
		for (var iter55 in this.success) {
			if (this.success.hasOwnProperty(iter55)) {
				iter55 = this.success[iter55];
				output.writeString(iter55);
			}
		}
		output.writeSetEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getVersionInformation_args = function (args) {
	this.language = null;
	if (args) {
		if (args.language !== undefined && args.language !== null) {
			this.language = args.language;
		}
	}
};
ExecutorService_getVersionInformation_args.prototype = {};
ExecutorService_getVersionInformation_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.STRING) {
					this.language = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getVersionInformation_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getVersionInformation_args');
	if (this.language !== null && this.language !== undefined) {
		output.writeFieldBegin('language', Thrift.Type.STRING, 1);
		output.writeString(this.language);
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getVersionInformation_result = function (args) {
	this.success = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = new ttypes.VersionInformation(args.success);
		}
	}
};
ExecutorService_getVersionInformation_result.prototype = {};
ExecutorService_getVersionInformation_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 0:
				if (ftype == Thrift.Type.STRUCT) {
					this.success = new ttypes.VersionInformation();
					this.success.read(input);
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getVersionInformation_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getVersionInformation_result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
		this.success.write(output);
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getBlacklist_args = function (args) {
	this.language = null;
	if (args) {
		if (args.language !== undefined && args.language !== null) {
			this.language = args.language;
		}
	}
};
ExecutorService_getBlacklist_args.prototype = {};
ExecutorService_getBlacklist_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.STRING) {
					this.language = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getBlacklist_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getBlacklist_args');
	if (this.language !== null && this.language !== undefined) {
		output.writeFieldBegin('language', Thrift.Type.STRING, 1);
		output.writeString(this.language);
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getBlacklist_result = function (args) {
	this.success = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = Thrift.copyList(args.success, [null]);
		}
	}
};
ExecutorService_getBlacklist_result.prototype = {};
ExecutorService_getBlacklist_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 0:
				if (ftype == Thrift.Type.SET) {
					var _size56 = 0;
					var _rtmp360;
					this.success = [];
					var _etype59 = 0;
					_rtmp360 = input.readSetBegin();
					_etype59 = _rtmp360.etype;
					_size56 = _rtmp360.size;
					for (var _i61 = 0; _i61 < _size56; ++_i61) {
						var elem62 = null;
						elem62 = input.readString();
						this.success.push(elem62);
					}
					input.readSetEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getBlacklist_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getBlacklist_result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.SET, 0);
		output.writeSetBegin(Thrift.Type.STRING, this.success.length);
		for (var iter63 in this.success) {
			if (this.success.hasOwnProperty(iter63)) {
				iter63 = this.success[iter63];
				output.writeString(iter63);
			}
		}
		output.writeSetEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getFragment_args = function (args) {
	this.language = null;
	this.functions = null;
	if (args) {
		if (args.language !== undefined && args.language !== null) {
			this.language = args.language;
		}
		if (args.functions !== undefined && args.functions !== null) {
			this.functions = Thrift.copyList(args.functions, [ttypes.FunctionSignature]);
		}
	}
};
ExecutorService_getFragment_args.prototype = {};
ExecutorService_getFragment_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.STRING) {
					this.language = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 3:
				if (ftype == Thrift.Type.LIST) {
					var _size64 = 0;
					var _rtmp368;
					this.functions = [];
					var _etype67 = 0;
					_rtmp368 = input.readListBegin();
					_etype67 = _rtmp368.etype;
					_size64 = _rtmp368.size;
					for (var _i69 = 0; _i69 < _size64; ++_i69) {
						var elem70 = null;
						elem70 = new ttypes.FunctionSignature();
						elem70.read(input);
						this.functions.push(elem70);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getFragment_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getFragment_args');
	if (this.language !== null && this.language !== undefined) {
		output.writeFieldBegin('language', Thrift.Type.STRING, 1);
		output.writeString(this.language);
		output.writeFieldEnd();
	}
	if (this.functions !== null && this.functions !== undefined) {
		output.writeFieldBegin('functions', Thrift.Type.LIST, 3);
		output.writeListBegin(Thrift.Type.STRUCT, this.functions.length);
		for (var iter71 in this.functions) {
			if (this.functions.hasOwnProperty(iter71)) {
				iter71 = this.functions[iter71];
				iter71.write(output);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_getFragment_result = function (args) {
	this.success = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = args.success;
		}
	}
};
ExecutorService_getFragment_result.prototype = {};
ExecutorService_getFragment_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 0:
				if (ftype == Thrift.Type.STRING) {
					this.success = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_getFragment_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_getFragment_result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.STRING, 0);
		output.writeString(this.success);
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_execute_args = function (args) {
	this.language = null;
	this.fragment = null;
	this.functions = null;
	this.testCases = null;
	if (args) {
		if (args.language !== undefined && args.language !== null) {
			this.language = args.language;
		}
		if (args.fragment !== undefined && args.fragment !== null) {
			this.fragment = args.fragment;
		}
		if (args.functions !== undefined && args.functions !== null) {
			this.functions = Thrift.copyList(args.functions, [ttypes.FunctionSignature]);
		}
		if (args.testCases !== undefined && args.testCases !== null) {
			this.testCases = Thrift.copyList(args.testCases, [ttypes.TestCase]);
		}
	}
};
ExecutorService_execute_args.prototype = {};
ExecutorService_execute_args.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 1:
				if (ftype == Thrift.Type.STRING) {
					this.language = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 2:
				if (ftype == Thrift.Type.STRING) {
					this.fragment = input.readString();
				} else {
					input.skip(ftype);
				}
				break;
			case 3:
				if (ftype == Thrift.Type.LIST) {
					var _size72 = 0;
					var _rtmp376;
					this.functions = [];
					var _etype75 = 0;
					_rtmp376 = input.readListBegin();
					_etype75 = _rtmp376.etype;
					_size72 = _rtmp376.size;
					for (var _i77 = 0; _i77 < _size72; ++_i77) {
						var elem78 = null;
						elem78 = new ttypes.FunctionSignature();
						elem78.read(input);
						this.functions.push(elem78);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 4:
				if (ftype == Thrift.Type.LIST) {
					var _size79 = 0;
					var _rtmp383;
					this.testCases = [];
					var _etype82 = 0;
					_rtmp383 = input.readListBegin();
					_etype82 = _rtmp383.etype;
					_size79 = _rtmp383.size;
					for (var _i84 = 0; _i84 < _size79; ++_i84) {
						var elem85 = null;
						elem85 = new ttypes.TestCase();
						elem85.read(input);
						this.testCases.push(elem85);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_execute_args.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_execute_args');
	if (this.language !== null && this.language !== undefined) {
		output.writeFieldBegin('language', Thrift.Type.STRING, 1);
		output.writeString(this.language);
		output.writeFieldEnd();
	}
	if (this.fragment !== null && this.fragment !== undefined) {
		output.writeFieldBegin('fragment', Thrift.Type.STRING, 2);
		output.writeString(this.fragment);
		output.writeFieldEnd();
	}
	if (this.functions !== null && this.functions !== undefined) {
		output.writeFieldBegin('functions', Thrift.Type.LIST, 3);
		output.writeListBegin(Thrift.Type.STRUCT, this.functions.length);
		for (var iter86 in this.functions) {
			if (this.functions.hasOwnProperty(iter86)) {
				iter86 = this.functions[iter86];
				iter86.write(output);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	if (this.testCases !== null && this.testCases !== undefined) {
		output.writeFieldBegin('testCases', Thrift.Type.LIST, 4);
		output.writeListBegin(Thrift.Type.STRUCT, this.testCases.length);
		for (var iter87 in this.testCases) {
			if (this.testCases.hasOwnProperty(iter87)) {
				iter87 = this.testCases[iter87];
				iter87.write(output);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorService_execute_result = function (args) {
	this.success = null;
	if (args) {
		if (args.success !== undefined && args.success !== null) {
			this.success = Thrift.copyList(args.success, [ttypes.Result]);
		}
	}
};
ExecutorService_execute_result.prototype = {};
ExecutorService_execute_result.prototype.read = function (input) {
	input.readStructBegin();
	while (true) {
		var ret = input.readFieldBegin();
		var fname = ret.fname;
		var ftype = ret.ftype;
		var fid = ret.fid;
		if (ftype == Thrift.Type.STOP) {
			break;
		}
		switch (fid) {
			case 0:
				if (ftype == Thrift.Type.LIST) {
					var _size88 = 0;
					var _rtmp392;
					this.success = [];
					var _etype91 = 0;
					_rtmp392 = input.readListBegin();
					_etype91 = _rtmp392.etype;
					_size88 = _rtmp392.size;
					for (var _i93 = 0; _i93 < _size88; ++_i93) {
						var elem94 = null;
						elem94 = new ttypes.Result();
						elem94.read(input);
						this.success.push(elem94);
					}
					input.readListEnd();
				} else {
					input.skip(ftype);
				}
				break;
			case 0:
				input.skip(ftype);
				break;
			default:
				input.skip(ftype);
		}
		input.readFieldEnd();
	}
	input.readStructEnd();
	return;
};

ExecutorService_execute_result.prototype.write = function (output) {
	output.writeStructBegin('ExecutorService_execute_result');
	if (this.success !== null && this.success !== undefined) {
		output.writeFieldBegin('success', Thrift.Type.LIST, 0);
		output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
		for (var iter95 in this.success) {
			if (this.success.hasOwnProperty(iter95)) {
				iter95 = this.success[iter95];
				iter95.write(output);
			}
		}
		output.writeListEnd();
		output.writeFieldEnd();
	}
	output.writeFieldStop();
	output.writeStructEnd();
	return;
};

ExecutorServiceClient = Executor.Client = function (output, pClass) {
	this.output = output;
	this.pClass = pClass;
	this._seqid = 0;
	this._reqs = {};
};
ExecutorServiceClient.prototype = {};
ExecutorServiceClient.prototype.seqid = function () {
	return this._seqid;
}
ExecutorServiceClient.prototype.new_seqid = function () {
	return this._seqid += 1;
}
ExecutorServiceClient.prototype.ping = function (callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[this.seqid()] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_ping();
		return _defer.promise;
	} else {
		this._reqs[this.seqid()] = callback;
		this.send_ping();
	}
};

ExecutorServiceClient.prototype.send_ping = function () {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_ping_args();
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_ping = function (input, mtype, rseqid) {
	var callback = this._reqs[rseqid] || function () {
		};
	delete this._reqs[rseqid];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_ping_result();
	result.read(input);
	input.readMessageEnd();

	callback(null)
};
ExecutorServiceClient.prototype.getSupportedLanguages = function (callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[this.seqid()] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_getSupportedLanguages();
		return _defer.promise;
	} else {
		this._reqs[this.seqid()] = callback;
		this.send_getSupportedLanguages();
	}
};

ExecutorServiceClient.prototype.send_getSupportedLanguages = function () {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('getSupportedLanguages', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_getSupportedLanguages_args();
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_getSupportedLanguages = function (input, mtype, rseqid) {
	var callback = this._reqs[rseqid] || function () {
		};
	delete this._reqs[rseqid];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_getSupportedLanguages_result();
	result.read(input);
	input.readMessageEnd();

	if (null !== result.success) {
		return callback(null, result.success);
	}
	return callback('getSupportedLanguages failed: unknown result');
};
ExecutorServiceClient.prototype.getVersionInformation = function (language, callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[this.seqid()] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_getVersionInformation(language);
		return _defer.promise;
	} else {
		this._reqs[this.seqid()] = callback;
		this.send_getVersionInformation(language);
	}
};

ExecutorServiceClient.prototype.send_getVersionInformation = function (language) {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('getVersionInformation', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_getVersionInformation_args();
	args.language = language;
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_getVersionInformation = function (input, mtype, rseqid) {
	var callback = this._reqs[rseqid] || function () {
		};
	delete this._reqs[rseqid];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_getVersionInformation_result();
	result.read(input);
	input.readMessageEnd();

	if (null !== result.success) {
		return callback(null, result.success);
	}
	return callback('getVersionInformation failed: unknown result');
};
ExecutorServiceClient.prototype.getBlacklist = function (language, callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[this.seqid()] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_getBlacklist(language);
		return _defer.promise;
	} else {
		this._reqs[this.seqid()] = callback;
		this.send_getBlacklist(language);
	}
};

ExecutorServiceClient.prototype.send_getBlacklist = function (language) {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('getBlacklist', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_getBlacklist_args();
	args.language = language;
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_getBlacklist = function (input, mtype, rseqid) {
	var callback = this._reqs[rseqid] || function () {
		};
	delete this._reqs[rseqid];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_getBlacklist_result();
	result.read(input);
	input.readMessageEnd();

	if (null !== result.success) {
		return callback(null, result.success);
	}
	return callback('getBlacklist failed: unknown result');
};
ExecutorServiceClient.prototype.getFragment = function (language, functions, callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[this.seqid()] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_getFragment(language, functions);
		return _defer.promise;
	} else {
		this._reqs[this.seqid()] = callback;
		this.send_getFragment(language, functions);
	}
};

ExecutorServiceClient.prototype.send_getFragment = function (language, functions) {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('getFragment', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_getFragment_args();
	args.language = language;
	args.functions = functions;
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_getFragment = function (input, mtype, rseqid) {
	var callback = this._reqs[rseqid] || function () {
		};
	delete this._reqs[rseqid];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_getFragment_result();
	result.read(input);
	input.readMessageEnd();

	if (null !== result.success) {
		return callback(null, result.success);
	}
	return callback('getFragment failed: unknown result');
};
ExecutorServiceClient.prototype.execute = function (language, fragment, functions, testCases, callback) {
	this._seqid = this.new_seqid();
	if (callback === undefined) {
		var _defer = Q.defer();
		this._reqs[this.seqid()] = function (error, result) {
			if (error) {
				_defer.reject(error);
			} else {
				_defer.resolve(result);
			}
		};
		this.send_execute(language, fragment, functions, testCases);
		return _defer.promise;
	} else {
		this._reqs[this.seqid()] = callback;
		this.send_execute(language, fragment, functions, testCases);
	}
};

ExecutorServiceClient.prototype.send_execute = function (language, fragment, functions, testCases) {
	var output = new this.pClass(this.output);
	output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid());
	var args = new ExecutorService_execute_args();
	args.language = language;
	args.fragment = fragment;
	args.functions = functions;
	args.testCases = testCases;
	args.write(output);
	output.writeMessageEnd();
	return this.output.flush();
};

ExecutorServiceClient.prototype.recv_execute = function (input, mtype, rseqid) {
	var callback = this._reqs[rseqid] || function () {
		};
	delete this._reqs[rseqid];
	if (mtype == Thrift.MessageType.EXCEPTION) {
		var x = new Thrift.TApplicationException();
		x.read(input);
		input.readMessageEnd();
		return callback(x);
	}
	var result = new ExecutorService_execute_result();
	result.read(input);
	input.readMessageEnd();

	if (null !== result.success) {
		return callback(null, result.success);
	}
	return callback('execute failed: unknown result');
};
ExecutorServiceProcessor = Executor.Processor = function (handler) {
	this._handler = handler
}
ExecutorServiceProcessor.prototype.process = function (input, output) {
	var r = input.readMessageBegin();
	if (this['process_' + r.fname]) {
		return this['process_' + r.fname].call(this, r.rseqid, input, output);
	} else {
		input.skip(Thrift.Type.STRUCT);
		input.readMessageEnd();
		var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
		output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
		x.write(output);
		output.writeMessageEnd();
		output.flush();
	}
}

ExecutorServiceProcessor.prototype.process_ping = function (seqid, input, output) {
	var args = new ExecutorService_ping_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.ping.length === 0) {
		Q.fcall(this._handler.ping)
			.then(function (result) {
				var result = new ExecutorService_ping_result({ success: result });
				output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.ping(function (err, result) {
			if (err == null) {
				var result = new ExecutorService_ping_result((err != null ? err : { success: result }));
				output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("ping", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

ExecutorServiceProcessor.prototype.process_getSupportedLanguages = function (seqid, input, output) {
	var args = new ExecutorService_getSupportedLanguages_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.getSupportedLanguages.length === 0) {
		Q.fcall(this._handler.getSupportedLanguages)
			.then(function (result) {
				var result = new ExecutorService_getSupportedLanguages_result({ success: result });
				output.writeMessageBegin("getSupportedLanguages", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getSupportedLanguages", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.getSupportedLanguages(function (err, result) {
			if (err == null) {
				var result = new ExecutorService_getSupportedLanguages_result((err != null ? err : { success: result }));
				output.writeMessageBegin("getSupportedLanguages", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getSupportedLanguages", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

ExecutorServiceProcessor.prototype.process_getVersionInformation = function (seqid, input, output) {
	var args = new ExecutorService_getVersionInformation_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.getVersionInformation.length === 1) {
		Q.fcall(this._handler.getVersionInformation, args.language)
			.then(function (result) {
				var result = new ExecutorService_getVersionInformation_result({ success: result });
				output.writeMessageBegin("getVersionInformation", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getVersionInformation", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.getVersionInformation(args.language, function (err, result) {
			if (err == null) {
				var result = new ExecutorService_getVersionInformation_result((err != null ? err : { success: result }));
				output.writeMessageBegin("getVersionInformation", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getVersionInformation", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

ExecutorServiceProcessor.prototype.process_getBlacklist = function (seqid, input, output) {
	var args = new ExecutorService_getBlacklist_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.getBlacklist.length === 1) {
		Q.fcall(this._handler.getBlacklist, args.language)
			.then(function (result) {
				var result = new ExecutorService_getBlacklist_result({ success: result });
				output.writeMessageBegin("getBlacklist", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getBlacklist", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.getBlacklist(args.language, function (err, result) {
			if (err == null) {
				var result = new ExecutorService_getBlacklist_result((err != null ? err : { success: result }));
				output.writeMessageBegin("getBlacklist", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getBlacklist", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

ExecutorServiceProcessor.prototype.process_getFragment = function (seqid, input, output) {
	var args = new ExecutorService_getFragment_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.getFragment.length === 2) {
		Q.fcall(this._handler.getFragment, args.language, args.functions)
			.then(function (result) {
				var result = new ExecutorService_getFragment_result({ success: result });
				output.writeMessageBegin("getFragment", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getFragment", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.getFragment(args.language, args.functions, function (err, result) {
			if (err == null) {
				var result = new ExecutorService_getFragment_result((err != null ? err : { success: result }));
				output.writeMessageBegin("getFragment", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("getFragment", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

ExecutorServiceProcessor.prototype.process_execute = function (seqid, input, output) {
	var args = new ExecutorService_execute_args();
	args.read(input);
	input.readMessageEnd();
	if (this._handler.execute.length === 4) {
		Q.fcall(this._handler.execute, args.language, args.fragment, args.functions, args.testCases)
			.then(function (result) {
				var result = new ExecutorService_execute_result({ success: result });
				output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			}, function (err) {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("execute", Thrift.MessageType.EXCEPTION, seqid);
				result.write(output);
				output.writeMessageEnd();
				output.flush();
			});
	} else {
		this._handler.execute(args.language, args.fragment, args.functions, args.testCases, function (err, result) {
			if (err == null) {
				var result = new ExecutorService_execute_result((err != null ? err : { success: result }));
				output.writeMessageBegin("execute", Thrift.MessageType.REPLY, seqid);
			} else {
				var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
				output.writeMessageBegin("execute", Thrift.MessageType.EXCEPTION, seqid);
			}
			result.write(output);
			output.writeMessageEnd();
			output.flush();
		});
	}
}

